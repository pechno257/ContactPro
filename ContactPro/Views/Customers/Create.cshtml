@using System.Web.UI.WebControls
@model ContactPro.Models.Customer

@{
    ViewBag.Title = "Add Customer";
}

<br />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-12 off-set-md-0">
                <h4>@ViewBag.Title</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label required-field text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control form-control-sm", PlaceHolder = "ABC Company", autofocus = "autofocus" } })
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.XceleratorURL, htmlAttributes: new { @class = "control-label text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.XceleratorURL, new { htmlAttributes = new { @class = "form-control form-control-sm", PlaceHolder = "https://www.domain.com" } })
                    @Html.ValidationMessageFor(model => model.XceleratorURL, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label required-field text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control form-control-sm", PlaceHolder = "555-555-5555" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Fax, htmlAttributes: new { @class = "control-label text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "form-control form-control-sm", PlaceHolder = "555-555-5555" } })
                    @Html.ValidationMessageFor(model => model.Fax, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label required-field text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Country, ContactPro.Utils.CountryList.GetCountryList(), "", new { @class = "form-control form-control-sm", @id = "countrydrp" })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control form-control-sm", PlaceHolder = "123 Main St" } })
                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control form-control-sm", PlaceHolder = "New York" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label required-field text-nowrap", @id = "statelabel" })
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.State, ContactPro.Utils.StateList.GetStateList(), "", new { @class = "form-control form-control-sm", @id = "statedrp" })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Zip, htmlAttributes: new { @class = "control-label text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control form-control-sm", PlaceHolder = "90237 or 93023-7474 or A2Z 7G8" } })
                    @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.IsHosted, htmlAttributes: new { @class = "control-label required-field text-nowrap" })
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.IsHosted, ContactPro.Utils.IsHosted.GetIsHosted(), "", new { @class = "form-control form-control-sm", @id = "ishosteddrp" })
                    @Html.ValidationMessageFor(model => model.IsHosted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.HostedServer, htmlAttributes: new { @class = "control-label required-field text-nowrap", @id = "hostedserverlabel" })
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.HostedServer, ContactPro.Utils.HostedServerList.GetHostedServerList(), "", new { @class = "form-control form-control-sm", @id = "hostedserverdrp" })
                    @Html.ValidationMessageFor(model => model.HostedServer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-4 offset-md-4 text-center">
            <input type="submit" value="Save" class="btn btn-success btn-sm btn-60" /><span class="margin-left-20">@Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-secondary btn-sm btn-60" })</span>
        </div>
    </div>

}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            if ($("#ishosteddrp").val() == "Y") {
                $("#hostedserverdrp").show();
                $("#hostedserverdrp").addClass("required");
                $("#hostedserverlabel").show();
            }
            else {
                $("#hostedserverdrp").hide();
                $("#hostedserverdrp option[value='']").attr('selected', true);
                $("#hostedserverlabel").hide();
            }


            $("#ishosteddrp").change(function () {
                if ($(this).val() == "Y") {
                    $("#hostedserverdrp").show();
                    $("#hostedserverdrp").addClass("required");
                    $("#hostedserverlabel").show();
                }
                else {
                    $("#hostedserverdrp").hide();
                    $("#hostedserverdrp option[value='']").attr('selected', true);
                    $("#hostedserverlabel").hide();
                }
            });
        });

        $(document).ready(function () {
            if ($("#countrydrp").val() == "JAM") {
                $("#statedrp").hide();
                $("#statedrp option[value='']").attr('selected', true);
                $("#statedrp").removeClass("required");
                $("#statelabel").hide();
            }
            else {
                $("#statedrp").show();
                $("#statedrp").addClass("required");
                $("#statelabel").show();
            }

            $("#countrydrp").change(function () {
                if ($(this).val() == "JAM") {
                    $("#statedrp").hide();
                    $("#statedrp option[val='']").attr('selected', true);
                    $("#statedrp").removeClass("required");
                    $("#statelabel").hide();
                }
                else {
                    $("#statedrp").show();
                    $("#statedrp").addClass("required");
                    $("#statelabel").show();
                }
            })
        });
    </script>
}

